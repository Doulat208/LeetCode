class Solution {
    public int tribonacci(int n) {

        // // without recursion:

        if(n == 0) return n;
        if( n == 1 || n == 2 ) return 1;

        int a = 0, b = 1, c = 1;
        for (int i = 3; i <= n; i++) {
            int temp = c;
            c = a + b + c;
            a = b;
            b = temp;
        }
        return c;

        // if(n == 0) return n;
        // if( n == 1 || n == 2 ) return 1;
        // int arr[] = new int[n+1];
        // arr[0] = 0;
        // arr[1] = 1;
        // arr[2] = 1;
        // for(int i = 3; i < n+1; i++) arr[i] = -1;
        
        // return helper(n, arr);
    }

    // public int helper(int n, int[] arr){
    //     if(arr[n] != -1) return arr[n];
    //     else return arr[n] = helper(n-1, arr) + helper(n-2, arr) + helper(n-3, arr);
    // }

}
