class Solution {
    public ListNode swapNodes(ListNode head, int k) {

        // ListNode temp = head;
        // ListNode first = kthNode(temp, k);
        // ListNode ans = reverse(temp);
        // ListNode second = kthNode(ans, k);
        // temp = reverse(ans);

        // int t = first.val;
        // first.val = second.val;
        // second.val = t;

        // return temp;

        ListNode first = head;
        int i = 1;
        while(i < k && first != null){
            first = first.next;
            i++;
        }

        ListNode temp = first;
        ListNode second = head;

        while(temp.next != null){
            temp = temp.next;
            second = second.next;
        }

        int t = first.val;
        first.val = second.val;
        second.val = t;

        return head;
        
    }

    // public ListNode reverse(ListNode head){
    //     ListNode prev = null;
    //     ListNode curr = head;
    //     while(curr != null){
    //         ListNode next = curr.next;
    //         curr.next = prev;
    //         prev = curr;
    //         curr = next;
    //     }
    //     return prev;
    // }

    // public ListNode kthNode(ListNode head, int k){
    //     ListNode temp = head;
    //     int i=0;
    //     while(i < k-1 && temp != null){
    //         temp = temp.next;
    //         i++;
    //     }
    //     return temp;
    // }
}
