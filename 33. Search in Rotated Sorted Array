class Solution {
    public int search(int[] nums, int target) {
        int pivot = findpivot(nums);
        if(pivot == -1){
            return bsearch(nums, target, 0, nums.length-1);
        }
        if(target == nums[pivot]){
            return pivot;
        }
        else if (target >= nums[0]) {
           return bsearch(nums,target,0,pivot-1);
        }
        else if(target < nums[0]){
            return bsearch(nums,target,pivot+1 ,nums.length-1);
        }
        return -1;
    }
    
    public int findpivot(int[] arr){
        int start = 0;
        int end = arr.length-1;

        while(start <= end){
            int mid = start + (end-start)/2;
            if(mid < end && arr[mid] > arr[mid+1]) return mid;
            else if(mid > start && arr[mid] < arr[mid-1]) return mid;
            else if(arr[start] >= arr[mid]) end = mid-1;
            else if(arr[start] < arr[mid]) start = mid+1;
        }
        return -1;
    }
        
    public int bsearch(int[] arr, int target, int start, int end){
        
            // For Assending order array..
            while(start <= end){
                // int mid = (start + end ) / 2; // it might be a biger integer than int
                int mid = start + (end -start) /2 ;
                boolean b = arr[start] < arr[end];

                if (arr[mid] == target){
                    return mid;
                }
                
                if(b){
                    if(target < arr[mid]){
                        end = mid -1;
                    }else{
                        start = mid +1;
                    }
                }else{
                    if(target > arr[mid]){
                        end = mid -1;
                    }else{
                        start = mid +1;
                    }
                }
            }
            // System.out.println(arr[start]+","+arr[end]);
            
        return -1;
    }
}
